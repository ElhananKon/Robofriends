{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundry.js","actions.js","containers/App.js","constants.js","robots.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","i","key","username","Scroll","props","style","overflow","border","height","children","SearchBox","searchChange","onChange","type","placeholder","ErrorBoundry","state","hasError","error","info","this","setState","Component","getUsers","a","fetch","response","json","jsonData","console","log","App","onRequestRobots","searchField","onSearchChange","isPending","filteredList","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","data","initialStateSearch","initialStateRobots","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","action","Object","assign","users_m","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8a6964e1.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({id,name,email}) => {\n\treturn (\n\t\t  <div className= 'tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5'>\n\t\t\t  <img alt=\"robot\" src={`https://robohash.org/${id}.jpeg?size=200x200&&bgset=bg1`} />\n\t\t\t  <div>\n\t\t\t  \t<h2>{name}</h2>\n\t\t\t  \t<p>{email}</p>\n\t\t\t  </div>\n\t\t  </div>\n\t\t);\n}\nexport default Card;","// import React,{Fragment} from 'react';\nimport React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\t//One way\n\t// const cardsArray = robots.map((user) => {\n\t// \treturn <Fragment key={i}>\n\t// \t<Card id={user.id} name={user.name} username={user.username} email={user.email}/>\n\t// \t</Fragment>\n\t// });\n\t//Another way\n\treturn (\n\t\t  <div>\n\t\t {\t\t \t\n\t\t \trobots.map((user,i) => {\t\t \t\t\n\t\t\treturn (<Card \n\t\t\t\t\tkey={user.id}\n\t\t\t\t \tid={user.id}\n\t\t\t\t  \tname={user.name}\n\t\t\t\t    username={robots[i].username}\n\t\t\t\t    email={user.email}\n\t\t\t\t    />)\n\t\t\t\t})\n\t\t }\n\t \t</div>\n\t\t);\n}\nexport default CardList;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t\t<div style={{ overflow: 'scroll',border:'5px solid black',height:'700px'}}>\n\t\t\t\t{props.children}\n\t\t\t</div>\n\t\t);\n};\nexport default Scroll;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n\treturn (\n\t\t\t<div className='pa2'>\n\t\t\t<input onChange={searchChange} className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='Search for a robot!'/>\n\t\t\t</ div>\n\t\t);\n};\nexport default SearchBox;","import React,{Component} from 'react';\n\nclass ErrorBoundry extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch( error, info) {\n\t\tthis.setState({hasError: true});\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>Oppppps somthing went wrong, Sorry :(</h1>;\n\t\t}\n\t\treturn this.props.children;\n\t}\n}\nexport default ErrorBoundry;","import {\n\tCHANGE_SEARCHFIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from './constants.js'\n\nexport const setSearchField = (text) => ({\n\ttype: CHANGE_SEARCHFIELD,\n\tpayload: text\n})\n\nexport const requestRobots = () => async (dispatch)=> {\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\n\ttry {\n\t\tconst data = await getUsers();\n\t\tdispatch({type: REQUEST_ROBOTS_SUCCESS,payload:data});\n   } catch (err) {\n   \tdispatch({type: REQUEST_ROBOTS_FAILED, payload: err});\n   }\n\t// fetch('https://jsonplaceholder.typicode.com/users')\n\t// .then(response => response.json())\n\t// .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS,payload:data}))\n\t// .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}\n\n const getUsers =  async () => {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n    const jsonData = await response.json();\n    console.log(jsonData);\n    return jsonData;\n };","import React,{Component} from 'react';\nimport {connect} from 'react-redux';\nimport CardList from '../components/CardList';\nimport Scroll from '../components/Scroll';\nimport Searchbox from '../components/SearchBox';\n// import {robots} from '../robots';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport {setSearchField, requestRobots } from '../actions';\nimport './App.css'\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error\n\t\t// searchField: state.searchField\n\t}\n}\nconst mapDispatchToState = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots())\n\t}\n}\n\nclass App extends Component {\n\n\tcomponentDidMount() {\n\t\tthis.props.onRequestRobots();\n\t}\n\n\trender(){\n\t\t// const {robots,searchField} = this.state;\n\t\t// const {robots} = this.state;\n\t\tconst {searchField,onSearchChange,robots,isPending,error} = this.props;\n\t\tconst filteredList = robots.filter( robot => {\n\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t});\n\t\treturn ((isPending || error !== '') ?\n\t\t\t <h1 className='tc'>Loading...</h1> :\n\t\t\t\t<div className='tc'>\n\t\t\t\t<h1 className='f2'>Robofriends</h1>\n\t\t\t\t<Searchbox searchChange={onSearchChange}/>\n\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t<CardList robots = {filteredList}/>\n\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t);\n\t}\n};\nexport default connect(mapStateToProps,mapDispatchToState)(App);","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\n\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\n\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","export const robots = [\n{\n\tid: 1,\n\tname: 'Yael Lea WOW Kon',\n\tusername:'Yaelk',\n\temail:\"kapyael@gmail.com\"\n},\n{\n\tid: 2,\n\tname: 'Ayala WOW Kon',\n\tusername:'Ayalak',\n\temail:\"Ayalak@gmail.com\"\n},\n{\n\tid: 3,\n\tname: 'Moria WOW Kon',\n\tusername:'Moriak',\n\temail:\"Moriak@gmail.com\"\n},\n{\n\tid: 4,\n\tname: 'Ehud Kon',\n\tusername:'Ehud',\n\temail:\"Ehud@gmail.com\"\n},\n{\n\tid: 5,\n\tname: 'Oshik Kon',\n\tusername:'Oshikk',\n\temail:\"Oshikk@gmail.com\"\n},\n{\n\tid: 6,\n\tname: 'Rivka Cohen',\n\tusername:'RivkaC',\n\temail:\"RivkaC@gmail.com\"\n},\n{\n\tid: 7,\n\tname: 'Shalom Cohen',\n\tusername:'Shalomc',\n\temail:\"ShalomC@gmail.com\"\n},\n{\n\tid: 8,\n\tname: 'Irit Cohen',\n\tusername:'Iritc',\n\temail:\"Iritc@gmail.com\"\n},\n{\n\tid: 9,\n\tname: 'Maya Kon',\n\tusername:'Mayak',\n\temail:\"Mayak@gmail.com\"\n},\n{\n\tid: 10,\n\tname: 'Amit Kon',\n\tusername:'Amitk',\n\temail:\"Amitk@gmail.com\"\n}\n]","import {robots} from './robots';\nimport {\n\tCHANGE_SEARCHFIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from './constants.js'\n\nconst initialStateSearch = {\n\tsearchField: \"\"\n}\n\nexport const searchRobots = (state= initialStateSearch,action={}) => {\n\tswitch (action.type) {\n\t\tcase CHANGE_SEARCHFIELD:\n\t\t\treturn Object.assign({},state,{searchField: action.payload});\n\t\t\t// return {...state,searchField: action.payload};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nconst initialStateRobots = {\n\tisPending: false,\n\trobots: [],\n\terror: ''\n}\n\nexport const requestRobots = (state= initialStateRobots,action={}) => {\n\tswitch (action.type) {\n\t\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\t\treturn Object.assign({},state,{isPending: true});\n\t\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\tconst users_m = action.payload.map( user => {\n\t\t\t\t\treturn {id:user.id + 10,\n\t\t\t\t  \tname:user.name,\n\t\t\t\t    username:user.username,\n\t\t\t\t    email:user.email}});\t\t\t\t\n\t\t\t\treturn Object.assign({},state,{robots: [...robots,...users_m], isPending: false});\n\t\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t\t\treturn Object.assign({},state,{error: action.payload, isPending: false});\n\n\t\t\tdefault:\n\t\t\t\treturn state;\n\t\t}\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore,applyMiddleware, combineReducers} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport {createLogger} from 'redux-logger';\nimport './index.css';\nimport App from './containers/App';\nimport {searchRobots, requestRobots} from './reducers'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n  \t<Provider store = {store}>\n    \t<App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}